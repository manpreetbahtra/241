//when going from pcap_next to pcap_loop, I did the following removals:

// from inside sniff - struct pcap_pkthdr header;
//   const unsigned char *packet;


  /* while (1) {
    // Capture a  packet
    //packet is a pointer to the packet data
    //packet =*data
    packet = pcap_next(pcap_handle, &header);
    if (packet == NULL) {
      // pcap_next can return null if no packet is seen within a timeout
      if (verbose) {
        printf("No packet received. %s\n", pcap_geterr(pcap_handle));
      }
    } else {
      // If verbose is set to 1, dump raw packet to terminal
      if (verbose) {
        dump(packet, header.len);
        
      }
      // Dispatch packet for processing
      dispatch(&header, packet, verbose);
    }
  } */



  //pcap_open_live opens a device for capturing. it returns a pointer to a pcap_t structure which is a handle that can be used for packet capture.  
// a handle denotes a packet capturing session



/////////////////////////////////

#define MAX_IP_ADDRESSES 1000  // Adjust as needed

char **sourceIPAddress;  // Declare a global array of pointers to strings
int numStoredIPs = 0; //variable to track the number of ips so far

  initializeSourceIPAddressArray(); //creating the source ip address array. 

void initializeSourceIPAddressArray() {
    sourceIPAddress = (char **)malloc(MAX_IP_ADDRESSES * sizeof(char *));
    if (sourceIPAddress == NULL) {
        fprintf(stderr, "Memory allocation failed\n");
        exit(EXIT_FAILURE);
    }

    for (int i = 0; i < MAX_IP_ADDRESSES; ++i) {
        sourceIPAddress[i] = NULL;  // Initialize each pointer to NULL
    }
}

void storeSourceIPAddress(const char *ip) {
  if (numStoredIPs < MAX_IP_ADDRESSES) {
    // Allocate memory for the IP address string
    sourceIPAddress[numStoredIPs] = (char *)malloc(strlen(ip) + 1);  // +1 for the null terminator

    if (sourceIPAddress[numStoredIPs] == NULL) {
      fprintf(stderr, "Memory allocation failed\n");

      // Clean up previously allocated memory
      for (int j = 0; j < numStoredIPs; ++j) {
        free(sourceIPAddress[j]);
      }
      free(sourceIPAddress);

      exit(EXIT_FAILURE);
    }

    // Copy the IP address string
    strcpy(sourceIPAddress[numStoredIPs], ip);
    for (int i=0; i<= numStoredIPs; i++){
      printf("%s\n",sourceIPAddress[i]);
    }
        
    numStoredIPs++;  // Increment the count of stored IP addresses
    //i want to count unique ips now. 
  }
}
storeSourceIPAddress(inet_ntoa(ip_header->ip_src));